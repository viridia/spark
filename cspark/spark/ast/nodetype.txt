/* Sentinel values */

NODE_KIND(ERROR)
NODE_KIND(ABSENT)

/* Built-in Values */

NODE_KIND(NULL_LITERAL)
NODE_KIND(SELF)
NODE_KIND(SUPER)

/* Identifiers */

NODE_KIND(IDENT)
NODE_KIND(MEMBER)
NODE_KIND(SELF_NAME_REF)
NODE_KIND(BUILTIN_ATTRIBUTE)
NODE_KIND(BUILTIN_TYPE)
NODE_KIND(KEYWORD_ARG)

/* Literals */

NODE_KIND(BOOLEAN_TRUE)
NODE_KIND(BOOLEAN_FALSE)
NODE_KIND(CHAR_LITERAL)
NODE_KIND(INTEGER_LITERAL)
NODE_KIND(FLOAT_LITERAL)
NODE_KIND(STRING_LITERAL)

/* Unary operators */

NODE_KIND(UNARY_START)
  NODE_KIND(NEGATE)
  NODE_KIND(COMPLEMENT)
  NODE_KIND(LOGICAL_NOT)
  NODE_KIND(PRE_INC)
  NODE_KIND(POST_INC)
  NODE_KIND(PRE_DEC)
  NODE_KIND(POST_DEC)
  NODE_KIND(STATIC)
  NODE_KIND(CONST)
  NODE_KIND(INHERITED_CONST)
  NODE_KIND(OPTIONAL)
NODE_KIND(UNARY_END)

NODE_KIND(OPER_START)

  /* Binary operators */

  NODE_KIND(ADD)
  NODE_KIND(SUB)
  NODE_KIND(MUL)
  NODE_KIND(DIV)
  NODE_KIND(MOD)
  NODE_KIND(BIT_AND)
  NODE_KIND(BIT_OR)
  NODE_KIND(BIT_XOR)
  NODE_KIND(RSHIFT)
  NODE_KIND(LSHIFT)
  NODE_KIND(EQUAL)
  NODE_KIND(REF_EQUAL)
  NODE_KIND(NOT_EQUAL)
  NODE_KIND(LESS_THAN)
  NODE_KIND(GREATER_THAN)
  NODE_KIND(LESS_THAN_OR_EQUAL)
  NODE_KIND(GREATER_THAN_OR_EQUAL)
  NODE_KIND(IS_SUB_TYPE)
  NODE_KIND(IS_SUPER_TYPE)
  NODE_KIND(ASSIGN)
  NODE_KIND(ASSIGN_ADD)
  NODE_KIND(ASSIGN_SUB)
  NODE_KIND(ASSIGN_MUL)
  NODE_KIND(ASSIGN_DIV)
  NODE_KIND(ASSIGN_MOD)
  NODE_KIND(ASSIGN_BIT_AND)
  NODE_KIND(ASSIGN_BIT_OR)
  NODE_KIND(ASSIGN_BIT_XOR)
  NODE_KIND(ASSIGN_RSHIFT)
  NODE_KIND(ASSIGN_LSHIFT)
  NODE_KIND(LOGICAL_AND)
  NODE_KIND(LOGICAL_OR)
  NODE_KIND(RANGE)
  NODE_KIND(AS_TYPE)
  NODE_KIND(IS)
  NODE_KIND(IS_NOT)
  NODE_KIND(IN)
  NODE_KIND(NOT_IN)
  NODE_KIND(RETURNS)
  NODE_KIND(LAMBDA)
  NODE_KIND(EXPR_TYPE)
  NODE_KIND(RETURN)
  NODE_KIND(THROW)

  /* N-ary operators */

  NODE_KIND(TUPLE)
  NODE_KIND(UNION)
  NODE_KIND(SPECIALIZE)
  NODE_KIND(CALL)
  NODE_KIND(FLUENT_MEMBER)
  NODE_KIND(ARRAY_LITERAL)
  NODE_KIND(LIST_LITERAL)
  NODE_KIND(SET_LITERAL)
  NODE_KIND(CALL_REQUIRED)
  NODE_KIND(CALL_REQUIRED_STATIC)
  NODE_KIND(LIST)       // List of opions for switch cases, catch blocks, etc.

  /* Misc statements */

  NODE_KIND(BLOCK)      // A statement block
  NODE_KIND(VAR_DEFN)   // A single variable definition (ident, type, init)
  NODE_KIND(ELSE)       // default for match or switch
  NODE_KIND(FINALLY)    // finally block for try

NODE_KIND(OPER_END)

NODE_KIND(CTRL_START)
  NODE_KIND(IF)         // if-statement (test, thenBlock, elseBlock)
  NODE_KIND(WHILE)      // while-statement (test, body)
  NODE_KIND(LOOP)       // loop (body)
  NODE_KIND(FOR)        // for (vars, init, test, step, body)
  NODE_KIND(FOR_IN)     // for in (vars, iter, body)
  NODE_KIND(TRY)        // try (test, body, cases...)
  NODE_KIND(CATCH)      // catch (except-list, body)
  NODE_KIND(SWITCH)     // switch (test, cases...)
  NODE_KIND(CASE)       // switch case (values | [values...]), body
  NODE_KIND(MATCH)      // match (test, cases...)
  NODE_KIND(PATTERN)    // match pattern (pattern, body)
NODE_KIND(CTRL_END)

/* Type operators */

NODE_KIND(MODIFIED)
NODE_KIND(FUNCTION_TYPE)

/* Other statements */

NODE_KIND(BREAK)
NODE_KIND(CONTINUE)

/* Definitions */
/* TODO: Move this outside */

NODE_KIND(VISIBILITY)

NODE_KIND(DEFN)
NODE_KIND(TYPE_DEFN)
NODE_KIND(CLASS_DEFN)
NODE_KIND(STRUCT_DEFN)
NODE_KIND(INTERFACE_DEFN)
NODE_KIND(EXTEND_DEFN)
NODE_KIND(OBJECT_DEFN)
NODE_KIND(ENUM_DEFN)
NODE_KIND(VAR)
NODE_KIND(LET)
NODE_KIND(VAR_LIST)   // A list of variable definitions
NODE_KIND(ENUM_VALUE)
NODE_KIND(PARAMETER)
NODE_KIND(TYPE_PARAMETER)
NODE_KIND(FUNCTION)
NODE_KIND(PROPERTY)
NODE_KIND(DEFN_END)

NODE_KIND(MODULE)
NODE_KIND(IMPORT)
